[project]
name = "risk-manager-v34"
version = "1.0.0-alpha"
description = "AI-Powered Trading Risk Management System"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Jake", email = "your.email@example.com"}
]
keywords = ["trading", "risk-management", "futures", "ai", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "project-x-py>=3.5.8",  # Trading SDK
    "polars>=0.20.0",        # Fast dataframes
    "pydantic>=2.5.0",       # Data validation
    "pydantic-settings>=2.1.0",  # Settings management
    "python-dotenv>=1.0.0",  # Environment variables
    "loguru>=0.7.0",         # Logging
    "aiofiles>=23.2.0",      # Async file I/O
    "pyyaml>=6.0",           # YAML configuration
    "httpx>=0.26.0",         # Async HTTP client
    "websockets>=12.0",      # WebSocket client
    "rich>=13.7.0",          # Beautiful console output
    "typer>=0.9.0",          # CLI framework
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "ipython>=8.18.0",
]

ai = [
    "anthropic>=0.18.0",     # Claude API client (optional)
]

[project.urls]
Homepage = "https://github.com/yourusername/risk-manager-v34"
Documentation = "https://github.com/yourusername/risk-manager-v34/docs"
Repository = "https://github.com/yourusername/risk-manager-v34"
Issues = "https://github.com/yourusername/risk-manager-v34/issues"

[project.scripts]
risk-manager = "risk_manager.cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/risk_manager"]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
addopts = "-v --strict-markers --tb=short"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "ai: AI feature tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/conftest.py"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[dependency-groups]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.1",
]
